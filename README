Author: Luke Familo
Project: Fractal Terrain Optimization.

Assignment:
	Take a previous project I've worked on and optimize it.

Original Assignment: (DSA2)
	Use the diamond square fractal terrain generation algorithm in an OpenGL project with some sort of way to "view" the terrain. (Specifically old open gl at the time).

Personal goals:
	Remake this project into a good portfolio piece. Easier to use, more portable(glfw), more modern(shaders), and just plain all around faster version of what I have. (And more comments...)

Temporary note** (there's some more stuff below here regarding github stuff).
Instructions:
	For now, I will just put the original readme in here for instructions. Hopeful some of this will be updated soon.

----------------------------------------------------------------------------------------------------------------

**** PRESS 'm', THEN YOU CAN USE THE MOUSE TO LOOK AROUND, PRESS AGAIN TO GET CONTROL OF YOUR MOUSE AGAIN.
ESC - exits

Camera Controls :
	m - Toggles capture of mouse to orient camera.
	
	Basic FPS style
	W/w - Forward
	S/s - Backward
	A/a - Left
	D/d - Right
	Space - Up
	b - Speed up movement
	B - Slow down movement
	
Terrain Controls
	Starts out with only the 4 outermost points calculated.
	
	The coloured in vertices indicate the next step to be calculated(red = 4 pints to be averaged, green = point that will be calculated).
	
	p - Continuously steps through while held down.
	P - Does a single calculation on the vertices indicated. (must be pressed again for second calculation).
	O/o - Finishes the current iteration (if on square, finishes all the squares until we go back to diamond) 
					(if on diamond finishes all the diamonds until we go back to do the next squares at half size)
	I/i - Finishes all calculations.
	
	INCODE:
		TerrainGenerator.h
		GRID_SIZE = number of points in 1 dimension of the grid (power of 2 + 1 works best)
		CELL_SIZE = size of each individual cell (larger numbers might not look larger but you'll perceive that the camera doesn't seem as fast)
		RANDOMNESS = how much random can be added/subtracted each step (gets smaller as the blocks get smaller, so this is just the starting point).
------------------------------------------------------------------------------------------------------------------

GitHub:
	I'm using github to make this easier to put up on my github account later on.
	Also to help manage some of the files that I'd rather not include in my deliverables (see .gitignore for more about this).